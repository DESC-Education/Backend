"""
Django settings for Settings project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
from Settings.env_config import config
import os
import sys
import sentry_sdk
from django.utils import timezone

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config.SECRET_KEY.get_secret_value()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config.DEBUG


ALLOWED_HOSTS = ["*"]
CORS_ALLOW_ALL_ORIGINS = True
CSRF_TRUSTED_ORIGINS = [
    'https://desc-education.ru',
    # Другие доверенные домены
]
# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:3000',
#     'http://193.233.20.226:3000'
# ]


# Application definition

INSTALLED_APPS = [
    'daphne',
    'django_eventstream',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'django_filters',
    'Files',
    'Users',
    'Profiles',
    'Tasks',
    'Admins',
    'Mail',
    'Chats',
    'Notifications',
    'corsheaders',
    'rest_framework_simplejwt',
    'drf_spectacular',
    "django_prometheus",
]

MIDDLEWARE = [
    "django_prometheus.middleware.PrometheusBeforeMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "django_prometheus.middleware.PrometheusAfterMiddleware",
    # 'silk.middleware.SilkyMiddleware',
]

ROOT_URLCONF = 'Settings.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'Mail', 'templates', 'Mail'),
                 os.path.join(BASE_DIR, 'Chats', 'templates', 'Chats'),
                 os.path.join(BASE_DIR, 'Profiles', 'templates', 'Profiles')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Settings.wsgi.application'
ASGI_APPLICATION = 'Settings.asgi.application'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        'django_eventstream.renderers.SSEEventRenderer',
        'django_eventstream.renderers.BrowsableAPIEventStreamRenderer'
    ],
    'DEFAULT_PAGINATION_CLASS': 'Settings.pagination.CustomPageNumberPagination',
    'PAGE_SIZE': 50,
    'UPLOADED_FILES_USE_URL': True,


}


# EVENTSTREAM_STORAGE_CLASS = 'django_eventstream.storage.DjangoModelStorage'
EVENTSTREAM_CHANNELMANAGER_CLASS = 'Notifications.channelmanager.ChannelManager'
EVENTSTREAM_ALLOW_ORIGINS = ['*']
EVENTSTREAM_ALLOW_CREDENTIALS = True
EVENTSTREAM_ALLOW_HEADERS = 'Authorization'






PROMETHEUS_METRICS_EXPORT_PORT_RANGE = range(4001, 4050)

AUTH_USER_MODEL = "Users.CustomUser"

SIMPLE_JWT = {
    "UPDATE_LAST_LOGIN": True,
    "ACCESS_TOKEN_LIFETIME": timezone.timedelta(minutes=15),
    "REFRESH_TOKEN_LIFETIME": timezone.timedelta(days=15),
}


SPECTACULAR_SETTINGS = {
    'TITLE': 'DESC Education API',
    'DESCRIPTION': '',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    "SERVE_PERMISSIONS": ["Settings.permissions.IsAdminRole"],
    "SERVE_AUTHENTICATION": [
        "rest_framework.authentication.BasicAuthentication"
    ],

    # OTHER SETTINGS
}

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django_prometheus.db.backends.postgresql',
        'NAME': config.DB_NAME,
        'USER': config.DB_USER.get_secret_value(),
        'PASSWORD': config.DB_PASSWORD.get_secret_value(),
        'HOST': config.DB_HOST,
        "PORT": config.DB_PORT
    }
}
# DATABASES = {
#         'default': {
#             'ENGINE': 'django.db.backends.sqlite3',
#             'NAME': BASE_DIR / 'db.sqlite3',
#         }
#     }

REDIS_PATH = f"redis://{config.REDIS_USER.get_secret_value()}:{config.REDIS_PASSWORD.get_secret_value()}@{config.REDIS_HOST}:{config.REDIS_PORT}/0"
CACHES = {
    "default": {
        "BACKEND": "django_prometheus.cache.backends.redis.RedisCache",
        "LOCATION": REDIS_PATH
    }
}

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [REDIS_PATH],
        },
    },
}

CELERY_BROKER_URL = REDIS_PATH
CELERY_RESULT_BACKEND = REDIS_PATH
CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP = True
CELERY_WORKER_SEND_TASK_EVENTS = True
CELERY_TASK_SEND_SENT_EVENT = True

CACHE_TTL = 60 * 1

# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'ru'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)
STATIC_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'static')
STATIC_URL = '/api/static/'

MEDIA_ROOT = os.path.join(os.path.dirname(BASE_DIR), 'mediafiles')
MEDIA_URL = '/api/media/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

ADMINS = (
    ('admin', 'yaroslavpavlenko2@gmail.com'),
    # ('admin', 'yaroslavpavlenko2@gmail.com'),
)

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 465
EMAIL_HOST_USER = config.EMAIL_USER.get_secret_value()
EMAIL_HOST_PASSWORD = config.EMAIL_PASSWORD.get_secret_value()
EMAIL_USE_SSL = False

DEFAULT_FROM_EMAIL = EMAIL_HOST_USER
SERVER_EMAIL = EMAIL_HOST_USER

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'gunicorn_format': {
            'format': '[%(asctime)s] [%(process)d] [%(levelname)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        }
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'gunicorn_format',
        },
        'mail_admins': {
            'level': 'ERROR',
            # 'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
        },
    },
    'loggers': {
        "django": {
            'handlers': ["console", 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        },
        "": {
            'handlers': ["console", 'mail_admins'],
            'level': 'INFO',
            'propagate': False,
        }
    },
    'root': {
        'level': 'INFO',
        'handlers': ["console", 'mail_admins'],
        'propagate': False,
    },

}

if DEBUG:
    INSTALLED_APPS += ["debug_toolbar"]
    MIDDLEWARE += ["debug_toolbar.middleware.DebugToolbarMiddleware"]


if 'test' in sys.argv:
    CELERY_BROKER_BACKEND = "memory"
    CELERY_TASK_EAGER_PROPAGATES = True
    CELERY_TASK_ALWAYS_EAGER = True
    DEFAULT_FILE_STORAGE = 'inmemorystorage.InMemoryStorage'
    PASSWORD_HASHERS = (
        'django.contrib.auth.hashers.MD5PasswordHasher',
    )
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.dummy.DummyCache',
        }
    }
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {'gunicorn_format': {'format': '[%(asctime)s] [%(process)d] [%(levelname)s] %(message)s',
                                           'datefmt': '%Y-%m-%d %H:%M:%S', }},
        'handlers': {
            'console': {'level': 'ERROR', 'class': 'logging.StreamHandler', 'formatter': 'gunicorn_format', }, },
        'root': {'level': 'INFO', 'handlers': ["console"], 'propagate': False, }, }
else:
    DEBUG_TOOLBAR_CONFIG = {'SHOW_TOOLBAR_CALLBACK': lambda request: True, 'IS_RUNNING_TESTS': False}
    sentry_sdk.init(
        dsn="https://7106f16a563ce0ba3f7b963353a1e479@o4507797688483840.ingest.de.sentry.io/4507856169926736",
        # Set traces_sample_rate to 1.0 to capture 100%
        # of transactions for tracing.
        traces_sample_rate=1.0,
        # Set profiles_sample_rate to 1.0 to profile 100%
        # of sampled transactions.
        # We recommend adjusting this value in production.
        profiles_sample_rate=1.0,
        environment=config.SENTRY_ENV,
    )
    EVENTSTREAM_REDIS = {
        'username': config.REDIS_USER.get_secret_value(),
        'password': config.REDIS_PASSWORD.get_secret_value(),
        'host': config.REDIS_HOST,
        'port': config.REDIS_PORT,
        'db': 0,
    }
